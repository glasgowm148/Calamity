{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading 2019A-assr1.json\n",
      "Reading 2019A-assr2.json\n",
      "Reading 2019A-assr3.json\n",
      "Reading 2019A-assr4.json\n",
      "Reading 2019A-assr5.json\n",
      "Reading 2019A-assr6.json\n",
      "Reading 2019-assr2.json\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n",
      "Found unknown category Location\n"
     ]
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC IS 2019 Evaluation Script\n",
    "# Configured for 2019-A Events\n",
    "# Used to evaluate TREC-IS runs\n",
    "# --------------------------------------------------\n",
    "version = 2.0 # Notebook Version Number\n",
    "\n",
    "# Configuration (Change this to match your setting)\n",
    "# System output file to evaluate:\n",
    "runFile = \"example.run\"\n",
    "runName = \"myrun\"\n",
    "\n",
    "# The location of the ground truth data against which to compare the run\n",
    "classificationLabelFiles = [\n",
    "    \"2019A-assr1.json\",\n",
    "    \"2019A-assr2.json\",\n",
    "    \"2019A-assr3.json\",\n",
    "    \"2019A-assr4.json\",\n",
    "    \"2019A-assr5.json\",\n",
    "    \"2019A-assr6.json\",\n",
    "    \"2019-assr2.json\"\n",
    "]\n",
    "\n",
    "# The location of the ontology file\n",
    "ontologyFile = \"ITR-H.types.v3.json\"\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Static data for the 2019 edition\n",
    "# --------------------------------------------------\n",
    "# Identifiers for the test events\n",
    "eventIdentifiers = [\n",
    "    \"floodChoco2019\",\n",
    "    \"earthquakeCalifornia2014\",\n",
    "    \"earthquakeBohol2013\",\n",
    "    \"hurricaneFlorence2018\",\n",
    "    \"shootingDallas2017\",\n",
    "    \"fireYMM2016\"\n",
    "]\n",
    "\n",
    "# Mapping of prority labels (by assessors) into numerical values [0-1]\n",
    "# We use this to calculate error against the participant priority scores\n",
    "priorityMapping = {\n",
    "    \"Critical\" : 1.0,\n",
    "    \"High\" : 0.75,\n",
    "    \"Medium\" : 0.5,\n",
    "    \"Low\" : 0.25\n",
    "}\n",
    "\n",
    "# What we consider to be highly important categories of information\n",
    "highImportCategories = [\n",
    "    \"Request-GoodsServices\",\n",
    "    \"Request-SearchAndRescue\",\n",
    "    \"CallToAction-MovePeople\",\n",
    "    \"Report-EmergingThreats\",\n",
    "    \"Report-NewSubEvent\",\n",
    "    \"Report-ServiceAvailable\"\n",
    "]\n",
    "\n",
    "highImportCategoriesShort = [\n",
    "    \"GoodsServices\",\n",
    "    \"SearchAndRescue\",\n",
    "    \"MovePeople\",\n",
    "    \"EmergingThreats\",\n",
    "    \"NewSubEvent\",\n",
    "    \"ServiceAvailable\"\n",
    "]\n",
    "\n",
    "# Parameters\n",
    "var_lambda = 0.75 # weight to place on actionable information categories in comparison to non actionable categoriee\n",
    "var_alpha = 0.3 # Flat gain for providing a correct alert, regardless of the categories selected\n",
    "alertPriorityThreshold = 0.7\n",
    "\n",
    "resultsFile = open(runName+\".results.overall.txt\",\"w+\")\n",
    "resultsFile.write(\"TREC-IS 2019-A Notebook Evaluator v\"+str(version)+\"\\n\")\n",
    "resultsFile.write(\"Run: \"+runName+\" (\"+runFile+\")\"+\"\\n\")\n",
    "resultsFile.write(\"\"+\"\\n\")\n",
    "\n",
    "perTopicFile = open(runName+\".results.pertopic.txt\",\"w+\")\n",
    "perTopicFile.write(\"TREC-IS 2019-A Notebook Evaluator v\"+str(version)+\"\\n\")\n",
    "perTopicFile.write(\"Run: \"+runName+\" (\"+runFile+\")\"+\"\\n\")\n",
    "perTopicFile.write(\"\"+\"\\n\")\n",
    "\n",
    "perEventFile = open(runName+\".results.perevent.txt\",\"w+\")\n",
    "perEventFile.write(\"TREC-IS 2019-A Notebook Evaluator v\"+str(version)+\"\\n\")\n",
    "perEventFile.write(\"Run: \"+runName+\" (\"+runFile+\")\"+\"\\n\")\n",
    "perEventFile.write(\"\"+\"\\n\")\n",
    "\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Processing Starts Here\n",
    "# --------------------------------------------------\n",
    "import json\n",
    "from pprint import pprint\n",
    "import gzip\n",
    "import math\n",
    "import numpy as np\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Stage 1: Load the ground truth dataset \n",
    "# --------------------------------------------------\n",
    "\n",
    "groundtruthJSON = []\n",
    "for groundtruthFile in classificationLabelFiles:\n",
    "    print(\"Reading \"+groundtruthFile)\n",
    "    with open(groundtruthFile) as groundtruthJSONFile:    \n",
    "        groundtruthJSON.append(json.load(groundtruthJSONFile))\n",
    "#pprint(groundtruthJSON[\"events\"])\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Stage 2: Load run file \n",
    "# --------------------------------------------------\n",
    "with open(runFile, encoding='utf-8') as openRunFile:\n",
    "    runContents = openRunFile.readlines() # lines not yet decoded\n",
    "#pprint(runContents[0])\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Stage 3: Load the categories \n",
    "# --------------------------------------------------\n",
    "with open(ontologyFile, encoding='utf-8') as ontologyJSONFile:    \n",
    "    ontologyJSON = json.load(ontologyJSONFile)\n",
    "\n",
    "informationTypes2Index = {} # category -> numerical index\n",
    "informationTypesShort2Index = {} # category short form (e.g. Report-EmergingThreats vs. EmergingThreats) -> numerical index\n",
    "informationTypeIndex = 0\n",
    "for informationTypeJSON in ontologyJSON[\"informationTypes\"]:\n",
    "    informationTypeId = informationTypeJSON[\"id\"]\n",
    "    informationTypes2Index[informationTypeId] = informationTypeIndex\n",
    "    informationTypesShort2Index[informationTypeId.split(\"-\")[1]] = informationTypeIndex\n",
    "    informationTypeIndex = informationTypeIndex + 1\n",
    "    \n",
    "# -----------------------------------------------------------\n",
    "# Stage 4: Produce ground truth maps between tweetIds and categories\n",
    "# -----------------------------------------------------------\n",
    "# Notes: Ground truth is used as a base, if a run includes tweets\n",
    "#        not in the ground truth they will be ignored\n",
    "# Assumptions: A tweet will not be returned for multiple events\n",
    "\n",
    "tweetId2TRECInfoCategories = {} # tweet id -> Array of categories selected by assessors\n",
    "tweetId2TRECHighImportInfoCategories = {} # tweet id -> Array of categories selected by assessors\n",
    "tweetId2TRECLowImportInfoCategories = {} # tweet id -> Array of categories selected by assessors\n",
    "tweetId2TRECPriorityCategory = {} # tweet id -> priority label (Critical,High,Medium,Low)\n",
    "index2TweetId = {} # ordered tweets\n",
    "event2tweetIds = {} # event -> tweet ids for tweets within that event\n",
    "countHighCriticalImport = 0\n",
    "countLowMediumImport = 0\n",
    "\n",
    "tweetIndex = 0\n",
    "for groundtruth in groundtruthJSON:\n",
    "    for eventJSON in groundtruth[\"events\"]:\n",
    "        eventid = eventJSON[\"eventid\"]\n",
    "        #print(eventid)\n",
    "        # two events were split and assessed in parts, re-name these so they are correctly read\n",
    "        if eventid.endswith(\"A\") | eventid.endswith(\"B\") | eventid.endswith(\"C\") | eventid.endswith(\"D\") | eventid.endswith(\"E\"):\n",
    "            eventid = eventid[:-1]\n",
    "        \n",
    "        if not event2tweetIds.get(eventid):\n",
    "            event2tweetIds[eventid] = []\n",
    "        \n",
    "        if any(eventid in s for s in eventIdentifiers):\n",
    "            # iterate over tweets in the event\n",
    "            for tweetJSON in eventJSON[\"tweets\"]:\n",
    "                tweetid = tweetJSON[\"postID\"]\n",
    "                categories = tweetJSON[\"categories\"]\n",
    "                priority = tweetJSON[\"priority\"]\n",
    "                \n",
    "                if priority == \"High\" or priority == \"Critical\":\n",
    "                    countHighCriticalImport = countHighCriticalImport + 1\n",
    "                \n",
    "                if priority == \"Low\" or priority == \"Medium\":\n",
    "                    countLowMediumImport = countLowMediumImport + 1\n",
    "                \n",
    "                event2tweetIds[eventid].append(tweetid)\n",
    "                \n",
    "                # check categories for name issues and correct if possible\n",
    "                cleanedCategories = []\n",
    "                highImportCats = []\n",
    "                lowImportCats = []\n",
    "                for categoryId in categories:\n",
    "                    if not any(categoryId in s for s in informationTypesShort2Index.keys()):\n",
    "                        print(\"Found unknown category \"+categoryId)\n",
    "                    else:\n",
    "                        cleanedCategories.append(categoryId)\n",
    "                        if any(categoryId in s for s in highImportCategoriesShort):\n",
    "                            highImportCats.append(categoryId)\n",
    "                        else:\n",
    "                            lowImportCats.append(categoryId)\n",
    "    \n",
    "                tweetId2TRECInfoCategories[tweetid] = cleanedCategories\n",
    "                tweetId2TRECHighImportInfoCategories[tweetid] = highImportCats\n",
    "                tweetId2TRECLowImportInfoCategories[tweetid] = lowImportCats\n",
    "                tweetId2TRECPriorityCategory[tweetid] = priority\n",
    "                index2TweetId[tweetIndex] = tweetid;\n",
    "                tweetIndex = tweetIndex + 1\n",
    "\n",
    "                \n",
    "        else:\n",
    "            print(\"WARN: Found ground truth data for event not in the 2019 topic set \"+eventid+\", ignoring...\")\n",
    "        \n",
    "# -----------------------------------------------------------\n",
    "# Stage 5: Produce run predicted maps between tweetIds and categories\n",
    "# -----------------------------------------------------------\n",
    "tweetId2RunInfoCategories = {} # tweet id -> predicted category by participant system\n",
    "tweetId2RunHighImportInfoCategories = {} # tweet id -> predicted category by participant system\n",
    "tweetId2RunLowImportInfoCategories = {} # tweet id -> predicted category by participant system\n",
    "tweetId2RunPriorityScore = {} # tweet id -> importance score from participant system\n",
    "event2TweetIdRank = {} # event -> (rank,tweetid)\n",
    "\n",
    "maxPrediction = -999999\n",
    "minPrediction = 999999\n",
    "\n",
    "for runLine in runContents:\n",
    "    predictionParts = runLine.replace(\"\\t\", \" \").split(\" \")\n",
    "    if (len(predictionParts)<6 ):\n",
    "        continue\n",
    "    else:\n",
    "        eventId = predictionParts[0]\n",
    "        tweetId = predictionParts[2]\n",
    "        rank = int(predictionParts[3])\n",
    "        categories = json.loads(predictionParts[5])\n",
    "        priority = predictionParts[4]\n",
    "        \n",
    "        priorityNum = float(priority)\n",
    "        if (maxPrediction<priorityNum): \n",
    "            maxPrediction = priorityNum\n",
    "        if (minPrediction>priorityNum):\n",
    "            minPrediction = priorityNum\n",
    "        \n",
    "        tweetId2RunInfoCategories[tweetId] = categories\n",
    "        tweetId2RunPriorityScore[tweetId] = priority\n",
    "        \n",
    "        if not event2TweetIdRank.get(eventId):\n",
    "            event2TweetIdRank[eventId] = []\n",
    "        rankTuple = (tweetId,rank)\n",
    "        event2TweetIdRank.get(eventId).append(rankTuple)\n",
    "        \n",
    "        highImportCats = []\n",
    "        lowImportCats = []\n",
    "        for categoryId in categories:\n",
    "            cleanedCategories.append(categoryId)\n",
    "            if any(categoryId in s for s in highImportCategories):\n",
    "                highImportCats.append(categoryId)\n",
    "            else:\n",
    "                lowImportCats.append(categoryId)\n",
    "                \n",
    "        tweetId2RunHighImportInfoCategories[tweetId] = highImportCats\n",
    "        tweetId2RunLowImportInfoCategories[tweetId] = lowImportCats\n",
    "\n",
    "for eventId in event2TweetIdRank.keys():\n",
    "    tweetsSorted = sorted(event2TweetIdRank.get(eventId), key=lambda tup: tup[1])\n",
    "    event2TweetIdRank[eventId] = tweetsSorted\n",
    "    \n",
    "# --------------------------------------------------\n",
    "# Stage 6: Create ground truth vectors per category\n",
    "# --------------------------------------------------\n",
    "\n",
    "category2GroundTruth = {} # category -> tweet vector with binary 1 vs all ground truth category labels\n",
    "\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    categoryIdShort = categoryId.split(\"-\")[1]\n",
    "    categoryVector = []\n",
    "    for i in range(len(index2TweetId)):\n",
    "        tweetId = index2TweetId[i]\n",
    "        categories = tweetId2TRECInfoCategories.get(tweetId)\n",
    "        #pprint(categories)\n",
    "        if any(categoryIdShort in s for s in categories):\n",
    "            categoryVector.append(1)\n",
    "        else:\n",
    "            categoryVector.append(0)\n",
    "    category2GroundTruth[categoryId] = categoryVector\n",
    "            \n",
    "#pprint(category2GroundTruth)\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Stage 7: Create run vectors per category \n",
    "# --------------------------------------------------\n",
    "# Assumptions: If run misses a tweet, we assume id has\n",
    "#              no categories\n",
    "category2Predicted = {} # category -> tweet vector with binary 1 vs all predicted by system labels\n",
    "\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    categoryIdShort = categoryId.split(\"-\")[1]\n",
    "    categoryVector = []\n",
    "    for i in range(len(index2TweetId)):\n",
    "        tweetId = index2TweetId[i]\n",
    "        \n",
    "        if tweetId2RunInfoCategories.get(tweetId):\n",
    "            categories = tweetId2RunInfoCategories.get(tweetId)\n",
    "            if any(categoryIdShort in s for s in categories):\n",
    "                categoryVector.append(1)\n",
    "            else:\n",
    "                categoryVector.append(0)\n",
    "        else:\n",
    "            categoryVector.append(0)\n",
    "\n",
    "    category2Predicted[categoryId] = categoryVector\n",
    "\n",
    "#pprint(category2Predicted)\n",
    "\n",
    "# --------------------------------------------------\n",
    "# Stage 8: Make event category vectors \n",
    "# --------------------------------------------------\n",
    "\n",
    "event2groundtruth = {} # event -> category -> tweet vector with binary 1 vs all ground truth category labels\n",
    "for eventId in eventIdentifiers:\n",
    "    eventCategories = {}\n",
    "    for categoryId in informationTypes2Index.keys():\n",
    "        categoryIdShort = categoryId.split(\"-\")[1]\n",
    "        categoryVector = []\n",
    "        #print(eventId)\n",
    "        for tweetId in event2tweetIds.get(eventId):\n",
    "            categories = tweetId2TRECInfoCategories.get(tweetId)\n",
    "            if any(categoryIdShort in s for s in categories):\n",
    "                categoryVector.append(1)\n",
    "            else:\n",
    "                categoryVector.append(0)\n",
    "            \n",
    "        eventCategories[categoryId] = categoryVector\n",
    "    event2groundtruth[eventId] = eventCategories\n",
    "    \n",
    "\n",
    "event2prediction = {} # event -> category -> tweet vector with binary 1 vs all predicted by system labels\n",
    "for eventId in eventIdentifiers:\n",
    "    eventCategories = {}\n",
    "    for categoryId in informationTypes2Index.keys():\n",
    "        categoryIdShort = categoryId.split(\"-\")[1]\n",
    "        categoryVector = []\n",
    "        for tweetId in event2tweetIds.get(eventId):\n",
    "            categories = tweetId2RunInfoCategories.get(tweetId)\n",
    "            if any(categoryId in s for s in categories):\n",
    "                categoryVector.append(1)\n",
    "            else:\n",
    "                categoryVector.append(0)\n",
    "            \n",
    "        eventCategories[categoryId] = categoryVector\n",
    "    event2prediction[eventId] = eventCategories\n",
    "\n",
    "\n",
    "# -----------------------------------------------------------\n",
    "# Stage 9: Make priority classification vectors\n",
    "# -----------------------------------------------------------\n",
    "\n",
    "category2GroundTruthPriority = {} # category -> tweet vector with binary 1 vs all ground truth priority labels\n",
    "\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    categoryIdShort = categoryId.split(\"-\")[1]\n",
    "    priorityVector = []\n",
    "    for i in range(len(index2TweetId)):\n",
    "        tweetId = index2TweetId[i]\n",
    "        categories = tweetId2TRECInfoCategories.get(tweetId)\n",
    "        if any(categoryIdShort in s for s in categories):\n",
    "            priority = tweetId2TRECPriorityCategory.get(tweetId)\n",
    "            priorityAsNumber = priorityMapping[priority]\n",
    "            priorityVector.append(priorityAsNumber)\n",
    "    category2GroundTruthPriority[categoryId] = priorityVector\n",
    "\n",
    "category2PredictedPriority = {} # category -> tweet vector with binary 1 vs all predicted by system labels\n",
    "\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    categoryIdShort = categoryId.split(\"-\")[1]\n",
    "    categoryVector = []\n",
    "    for i in range(len(index2TweetId)):\n",
    "        tweetId = index2TweetId[i]\n",
    "        categories = tweetId2TRECInfoCategories.get(tweetId)\n",
    "        if any(categoryIdShort in s for s in categories):\n",
    "            if tweetId2RunPriorityScore.get(tweetId):\n",
    "                priority = float(tweetId2RunPriorityScore.get(tweetId))\n",
    "                \n",
    "                # scale to between 0 and 1\n",
    "                if (maxPrediction-minPrediction)>0:\n",
    "                    normPriority = (priority-minPrediction)/(maxPrediction-minPrediction)\n",
    "                else:\n",
    "                    normPriority = 0.0;\n",
    "                # bound by min and max on ground truth\n",
    "                if (normPriority<priorityMapping[\"Low\"]): \n",
    "                    normPriority = priorityMapping[\"Low\"]\n",
    "                if (normPriority>priorityMapping[\"Critical\"]): \n",
    "                    normPriority = priorityMapping[\"Critical\"]\n",
    "                \n",
    "                categoryVector.append(normPriority)\n",
    "            else:\n",
    "                categoryVector.append(priorityMapping[\"Low\"]) # default to low priority\n",
    "\n",
    "    category2PredictedPriority[categoryId] = categoryVector\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# --------------------------------------------------\n",
    "# Disable Warnings (comment this out when debugging!)\n",
    "# --------------------------------------------------\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\") # ignore warnings about 0-score categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "High Importance Alert Worth: 0.07031700288184162\n",
      "Low Importance Alert Worth: 0.4518708612697476\n",
      "Accumulated Alert Worth: 0.26109393207579484\n"
     ]
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Mertic: Accumulated Alert Worth\n",
    "# Measures system effectiveness from the perspective\n",
    "# of end-user alerting of important information\n",
    "# --------------------------------------------------\n",
    "\n",
    "totalHighImportWorth = 0.0\n",
    "totalLowImportWorth = 0.0\n",
    "AccumulatedAlertWorth = 0.0\n",
    "\n",
    "\n",
    "for eventId in event2TweetIdRank.keys():\n",
    "    numConsecutiveFalseAlerts = 0\n",
    "    for tweetIdRank in event2TweetIdRank[eventId]:\n",
    "        \n",
    "        tweetId = tweetIdRank[0]\n",
    "        trecPriority = tweetId2TRECPriorityCategory[tweetId]\n",
    "        runPriority = float(tweetId2RunPriorityScore[tweetId])\n",
    "        \n",
    "        trecHighImportCats = set(tweetId2TRECHighImportInfoCategories[tweetid])\n",
    "        trecLowImportCats = set(tweetId2TRECHighImportInfoCategories[tweetid])\n",
    "        runHighImportCats = set(tweetId2RunHighImportInfoCategories[tweetId])\n",
    "        runLowImportCats = set(tweetId2RunLowImportInfoCategories[tweetId])\n",
    "        \n",
    "        gamma = 0\n",
    "        if len(trecHighImportCats)>0:\n",
    "            gamma = var_lambda\n",
    "        \n",
    "        ActCScore = 0.0\n",
    "        if len(trecHighImportCats | runHighImportCats) > 0: ActCScore = gamma*(len(trecHighImportCats & runHighImportCats) / len(trecHighImportCats | runHighImportCats))\n",
    "        NActCScore = 0.0\n",
    "        if len(trecLowImportCats | runLowImportCats)>0: NActCScore = (1-gamma)*(len(trecLowImportCats & runLowImportCats) / len(trecLowImportCats | runLowImportCats))\n",
    "        \n",
    "        worth = 0.0\n",
    "        if trecPriority == \"High\" or trecPriority == \"Critical\":\n",
    "            # calculate highImportWorth\n",
    "            if runPriority >= alertPriorityThreshold:\n",
    "                worth = var_alpha + ((1 - var_alpha) * (ActCScore+NActCScore))\n",
    "                numConsecutiveFalseAlerts = 0\n",
    "            else:\n",
    "                worth = -1\n",
    "            \n",
    "            #print(eventId+\" \"+tweetId+\" (High) \"+str(worth))\n",
    "            \n",
    "            worth = worth/countHighCriticalImport\n",
    "            \n",
    "            totalHighImportWorth = totalHighImportWorth + worth\n",
    "        else:\n",
    "            if runPriority >= alertPriorityThreshold:\n",
    "                worth = max(-math.log10((numConsecutiveFalseAlerts/2)+1),-1)\n",
    "                numConsecutiveFalseAlerts = numConsecutiveFalseAlerts + 1\n",
    "            else:\n",
    "                worth = ActCScore+NActCScore\n",
    "            \n",
    "            #print(eventId+\" \"+tweetId+\" (Low) \"+str(worth)+\" (\"+str(numConsecutiveFalseAlerts)+\")\")\n",
    "            \n",
    "            worth = worth/countLowMediumImport\n",
    "            \n",
    "            totalLowImportWorth = totalLowImportWorth + worth\n",
    "            \n",
    "        AccumulatedAlertWorth = AccumulatedAlertWorth + worth\n",
    "        \n",
    "        \n",
    "        \n",
    "AccumulatedAlertWorth = ((AccumulatedAlertWorth/2)+1)/2\n",
    "totalHighImportWorth = (totalHighImportWorth+1)/2\n",
    "totalLowImportWorth = (totalLowImportWorth+1)/2\n",
    "\n",
    "print(\"High Importance Alert Worth: \"+str(totalHighImportWorth))\n",
    "print(\"Low Importance Alert Worth: \"+str(totalLowImportWorth))\n",
    "print(\"Accumulated Alert Worth: \"+str(AccumulatedAlertWorth))\n",
    "       \n",
    "resultsFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "resultsFile.write(\"EVALUATON: Alertng Performance\"+\"\\n\")\n",
    "resultsFile.write(\"Overall performance\"+\"\\n\")\n",
    "resultsFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "resultsFile.write(\"> High Importance Alert Worth:\"+\"\\t\"+str(totalHighImportWorth)+\"\\n\")\n",
    "resultsFile.write(\"> Low Importance Alert Worth:\"+\"\\t\"+str(totalLowImportWorth)+\"\\n\")\n",
    "resultsFile.write(\"> Accumulated Alert Worth:\"+\"\\t\"+str(AccumulatedAlertWorth)+\"\\n\")\n",
    "resultsFile.write(\"\"+\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Information Type Precision (positive class, multi-type, macro): 0.09495137316489517\n",
      "Information Type Recall (positive class, multi-type, macro): 0.049692791177132066\n",
      "Information Type F1 (positive class, multi-type, macro): 0.051222809073088495\n",
      "Information Type Accuracy (overall, multi-type, macro): 0.873177015107851\n",
      "High Importance Information Type Precision (positive class, multi-type, macro): 0.020559466305133223\n",
      "High Importance Information Type Recall (positive class, multi-type, macro): 0.028287452154243747\n",
      "High Importance Information Type F1 (positive class, multi-type, macro): 0.02215300308038304\n",
      "High Importance Information Type Accuracy (overall, multi-type, macro): 0.9458780892498471\n",
      "Low Importance Information Type Precision (positive class, multi-type, macro): 0.11974867545148249\n",
      "Low Importance Information Type Recall (positive class, multi-type, macro): 0.056827904184761496\n",
      "Low Importance Information Type F1 (positive class, multi-type, macro): 0.060912744403990304\n",
      "Low Importance Information Type Accuracy (overall, multi-type, macro): 0.8489433237271854\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Type Categorization\n",
    "# Overall performance\n",
    "# --------------------------------------------------\n",
    "# Average performance over information types\n",
    "# Macro averaged (information types have equal weight)\n",
    "# Does not average across events (larger events have more impact)\n",
    "# Positive class is the target class\n",
    "# Precision, recall and F1 only consider the positive class\n",
    "# Accuracy is an overall metric\n",
    "# We report performance for all categories, high importance categories and low importance categories\n",
    "\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "avgPrecision = 0.0\n",
    "avgRecall = 0.0\n",
    "avgF1 = 0.0\n",
    "avgAccuracy = 0.0\n",
    "\n",
    "avgPrecisionHigh = 0.0\n",
    "avgRecallHigh = 0.0\n",
    "avgF1High = 0.0\n",
    "avgAccuracyHigh = 0.0\n",
    "\n",
    "avgPrecisionLow = 0.0\n",
    "avgRecallLow = 0.0\n",
    "avgF1Low = 0.0\n",
    "avgAccuracyLow = 0.0\n",
    "\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    categoryPrecision = precision_score(category2GroundTruth[categoryId], category2Predicted[categoryId], average='binary')\n",
    "    categoryRecall = recall_score(category2GroundTruth[categoryId], category2Predicted[categoryId], average='binary')\n",
    "    categoryF1 = f1_score(category2GroundTruth[categoryId], category2Predicted[categoryId], average='binary')\n",
    "    categoryAccuracy = accuracy_score(category2GroundTruth[categoryId], category2Predicted[categoryId])\n",
    "    \n",
    "    avgPrecision = avgPrecision + categoryPrecision\n",
    "    avgRecall = avgRecall + categoryRecall\n",
    "    avgF1 = avgF1 + categoryF1\n",
    "    avgAccuracy = avgAccuracy + categoryAccuracy\n",
    "    \n",
    "    if any(categoryId in s for s in highImportCategories):\n",
    "        avgPrecisionHigh = avgPrecisionHigh + categoryPrecision\n",
    "        avgRecallHigh = avgRecallHigh + categoryRecall\n",
    "        avgF1High = avgF1High + categoryF1\n",
    "        avgAccuracyHigh = avgAccuracyHigh + categoryAccuracy\n",
    "    else:\n",
    "        avgPrecisionLow = avgPrecisionLow + categoryPrecision\n",
    "        avgRecallLow = avgRecallLow + categoryRecall\n",
    "        avgF1Low = avgF1Low + categoryF1\n",
    "        avgAccuracyLow = avgAccuracyLow + categoryAccuracy\n",
    "\n",
    "numInformationTypes = len(informationTypes2Index)\n",
    "numHighInformationTypes = len(highImportCategories)\n",
    "numLowInformationTypes = numInformationTypes - numHighInformationTypes\n",
    "        \n",
    "print(\"Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecision/numInformationTypes))\n",
    "print(\"Information Type Recall (positive class, multi-type, macro): \"+str(avgRecall/numInformationTypes))\n",
    "print(\"Information Type F1 (positive class, multi-type, macro): \"+str(avgF1/numInformationTypes))\n",
    "print(\"Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracy/numInformationTypes))\n",
    "\n",
    "print(\"High Importance Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecisionHigh/numHighInformationTypes))\n",
    "print(\"High Importance Information Type Recall (positive class, multi-type, macro): \"+str(avgRecallHigh/numHighInformationTypes))\n",
    "print(\"High Importance Information Type F1 (positive class, multi-type, macro): \"+str(avgF1High/numHighInformationTypes))\n",
    "print(\"High Importance Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracyHigh/numHighInformationTypes))\n",
    "\n",
    "print(\"Low Importance Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecisionLow/numLowInformationTypes))\n",
    "print(\"Low Importance Information Type Recall (positive class, multi-type, macro): \"+str(avgRecallLow/numLowInformationTypes))\n",
    "print(\"Low Importance Information Type F1 (positive class, multi-type, macro): \"+str(avgF1Low/numLowInformationTypes))\n",
    "print(\"Low Importance Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracyLow/numLowInformationTypes))\n",
    "\n",
    "resultsFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "resultsFile.write(\"EVALUATON: Information Type Categorization\"+\"\\n\")\n",
    "resultsFile.write(\"Overall performance\"+\"\\n\")\n",
    "resultsFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "resultsFile.write(\"> Information Type Precision (positive class, multi-type, macro):\"+\"\\t\"+str(avgPrecision/len(informationTypes2Index))+\"\\n\")\n",
    "resultsFile.write(\"> Information Type Recall (positive class, multi-type, macro):\"+\"\\t\"+str(avgRecall/len(informationTypes2Index))+\"\\n\")\n",
    "resultsFile.write(\"> Information Type F1 (positive class, multi-type, macro):\"+\"\\t\"+str(avgF1/len(informationTypes2Index))+\"\\n\")\n",
    "resultsFile.write(\"> Information Type Accuracy (overall, multi-type, macro):\"+\"\\t\"+str(avgAccuracy/len(informationTypes2Index))+\"\\n\")\n",
    "resultsFile.write(\"> High Importance Information Type Precision (positive class, multi-type, macro):\"+\"\\t\"+str(avgPrecisionHigh/numHighInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> High Importance Information Type Recall (positive class, multi-type, macro):\"+\"\\t\"+str(avgRecallHigh/numHighInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> High Importance Information Type F1 (positive class, multi-type, macro):\"+\"\\t\"+str(avgF1High/numHighInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> High Importance Information Type Accuracy (overall, multi-type, macro):\"+\"\\t\"+str(avgAccuracyHigh/numHighInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> Low Importance Information Type Precision (positive class, multi-type, macro):\"+\"\\t\"+str(avgPrecisionLow/numLowInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> Low Importance Information Type Recall (positive class, multi-type, macro):\"+\"\\t\"+str(avgRecallLow/numLowInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> Low Importance Information Type F1 (positive class, multi-type, macro):\"+\"\\t\"+str(avgF1Low/numLowInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> Low Importance Information Type Accuracy (overall, multi-type, macro):\"+\"\\t\"+str(avgAccuracyLow/numLowInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"\"+\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Request-GoodsServices\n",
      "                       precision    recall  f1-score   support\n",
      "\n",
      "        Other Classes       1.00      0.96      0.98      7611\n",
      "Request-GoodsServices       0.00      0.00      0.00        23\n",
      "\n",
      "            micro avg       0.96      0.96      0.96      7634\n",
      "            macro avg       0.50      0.48      0.49      7634\n",
      "         weighted avg       0.99      0.96      0.98      7634\n",
      "\n",
      "Request-SearchAndRescue\n",
      "                         precision    recall  f1-score   support\n",
      "\n",
      "          Other Classes       1.00      0.97      0.98      7624\n",
      "Request-SearchAndRescue       0.00      0.00      0.00        10\n",
      "\n",
      "              micro avg       0.96      0.96      0.96      7634\n",
      "              macro avg       0.50      0.48      0.49      7634\n",
      "           weighted avg       1.00      0.96      0.98      7634\n",
      "\n",
      "Request-InformationWanted\n",
      "                           precision    recall  f1-score   support\n",
      "\n",
      "            Other Classes       0.99      0.96      0.98      7563\n",
      "Request-InformationWanted       0.01      0.04      0.02        71\n",
      "\n",
      "                micro avg       0.95      0.95      0.95      7634\n",
      "                macro avg       0.50      0.50      0.50      7634\n",
      "             weighted avg       0.98      0.95      0.97      7634\n",
      "\n",
      "CallToAction-Volunteer\n",
      "                        precision    recall  f1-score   support\n",
      "\n",
      "         Other Classes       1.00      0.96      0.98      7610\n",
      "CallToAction-Volunteer       0.00      0.04      0.01        24\n",
      "\n",
      "             micro avg       0.96      0.96      0.96      7634\n",
      "             macro avg       0.50      0.50      0.49      7634\n",
      "          weighted avg       0.99      0.96      0.97      7634\n",
      "\n",
      "CallToAction-Donations\n",
      "                        precision    recall  f1-score   support\n",
      "\n",
      "         Other Classes       0.99      0.96      0.98      7556\n",
      "CallToAction-Donations       0.01      0.04      0.02        78\n",
      "\n",
      "             micro avg       0.95      0.95      0.95      7634\n",
      "             macro avg       0.50      0.50      0.50      7634\n",
      "          weighted avg       0.98      0.95      0.97      7634\n",
      "\n",
      "CallToAction-MovePeople\n",
      "                         precision    recall  f1-score   support\n",
      "\n",
      "          Other Classes       0.99      0.96      0.97      7526\n",
      "CallToAction-MovePeople       0.00      0.01      0.01       108\n",
      "\n",
      "              micro avg       0.95      0.95      0.95      7634\n",
      "              macro avg       0.49      0.49      0.49      7634\n",
      "           weighted avg       0.97      0.95      0.96      7634\n",
      "\n",
      "Report-FirstPartyObservation\n",
      "                              precision    recall  f1-score   support\n",
      "\n",
      "               Other Classes       0.94      0.96      0.95      7150\n",
      "Report-FirstPartyObservation       0.07      0.04      0.05       484\n",
      "\n",
      "                   micro avg       0.90      0.90      0.90      7634\n",
      "                   macro avg       0.50      0.50      0.50      7634\n",
      "                weighted avg       0.88      0.90      0.89      7634\n",
      "\n",
      "Report-ThirdPartyObservation\n",
      "                              precision    recall  f1-score   support\n",
      "\n",
      "               Other Classes       0.96      0.96      0.96      7317\n",
      "Report-ThirdPartyObservation       0.04      0.04      0.04       317\n",
      "\n",
      "                   micro avg       0.92      0.92      0.92      7634\n",
      "                   macro avg       0.50      0.50      0.50      7634\n",
      "                weighted avg       0.92      0.92      0.92      7634\n",
      "\n",
      "Report-Weather\n",
      "                precision    recall  f1-score   support\n",
      "\n",
      " Other Classes       0.96      0.97      0.96      7334\n",
      "Report-Weather       0.05      0.04      0.04       300\n",
      "\n",
      "     micro avg       0.93      0.93      0.93      7634\n",
      "     macro avg       0.50      0.50      0.50      7634\n",
      "  weighted avg       0.92      0.93      0.93      7634\n",
      "\n",
      "Report-EmergingThreats\n",
      "                        precision    recall  f1-score   support\n",
      "\n",
      "         Other Classes       0.94      0.96      0.95      7168\n",
      "Report-EmergingThreats       0.05      0.03      0.04       466\n",
      "\n",
      "             micro avg       0.91      0.91      0.91      7634\n",
      "             macro avg       0.49      0.50      0.49      7634\n",
      "          weighted avg       0.88      0.91      0.90      7634\n",
      "\n",
      "Report-NewSubEvent\n",
      "                    precision    recall  f1-score   support\n",
      "\n",
      "     Other Classes       0.98      0.96      0.97      7492\n",
      "Report-NewSubEvent       0.03      0.07      0.05       142\n",
      "\n",
      "         micro avg       0.94      0.94      0.94      7634\n",
      "         macro avg       0.51      0.52      0.51      7634\n",
      "      weighted avg       0.96      0.94      0.95      7634\n",
      "\n",
      "Report-MultimediaShare\n",
      "                        precision    recall  f1-score   support\n",
      "\n",
      "         Other Classes       0.79      0.96      0.87      6034\n",
      "Report-MultimediaShare       0.17      0.03      0.05      1600\n",
      "\n",
      "             micro avg       0.77      0.77      0.77      7634\n",
      "             macro avg       0.48      0.50      0.46      7634\n",
      "          weighted avg       0.66      0.77      0.70      7634\n",
      "\n",
      "Report-ServiceAvailable\n",
      "                         precision    recall  f1-score   support\n",
      "\n",
      "          Other Classes       0.98      0.97      0.97      7484\n",
      "Report-ServiceAvailable       0.04      0.06      0.04       150\n",
      "\n",
      "              micro avg       0.95      0.95      0.95      7634\n",
      "              macro avg       0.51      0.51      0.51      7634\n",
      "           weighted avg       0.96      0.95      0.96      7634\n",
      "\n",
      "Report-Factoid\n",
      "                precision    recall  f1-score   support\n",
      "\n",
      " Other Classes       0.87      0.96      0.91      6625\n",
      "Report-Factoid       0.14      0.04      0.06      1009\n",
      "\n",
      "     micro avg       0.84      0.84      0.84      7634\n",
      "     macro avg       0.50      0.50      0.49      7634\n",
      "  weighted avg       0.77      0.84      0.80      7634\n",
      "\n",
      "Report-Official\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "  Other Classes       0.97      0.96      0.97      7404\n",
      "Report-Official       0.01      0.01      0.01       230\n",
      "\n",
      "      micro avg       0.93      0.93      0.93      7634\n",
      "      macro avg       0.49      0.49      0.49      7634\n",
      "   weighted avg       0.94      0.93      0.94      7634\n",
      "\n",
      "Report-News\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "Other Classes       0.81      0.96      0.88      6158\n",
      "  Report-News       0.19      0.03      0.06      1476\n",
      "\n",
      "    micro avg       0.78      0.78      0.78      7634\n",
      "    macro avg       0.50      0.50      0.47      7634\n",
      " weighted avg       0.69      0.78      0.72      7634\n",
      "\n",
      "Report-CleanUp\n",
      "                precision    recall  f1-score   support\n",
      "\n",
      " Other Classes       0.99      0.96      0.98      7559\n",
      "Report-CleanUp       0.00      0.01      0.01        75\n",
      "\n",
      "     micro avg       0.95      0.95      0.95      7634\n",
      "     macro avg       0.50      0.49      0.49      7634\n",
      "  weighted avg       0.98      0.95      0.97      7634\n",
      "\n",
      "Report-Hashtags\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "  Other Classes       0.50      0.97      0.66      3789\n",
      "Report-Hashtags       0.55      0.04      0.07      3845\n",
      "\n",
      "      micro avg       0.50      0.50      0.50      7634\n",
      "      macro avg       0.52      0.50      0.36      7634\n",
      "   weighted avg       0.52      0.50      0.36      7634\n",
      "\n",
      "Report-OriginalEvent\n",
      "                      precision    recall  f1-score   support\n",
      "\n",
      "       Other Classes       0.88      0.96      0.92      6750\n",
      "Report-OriginalEvent       0.12      0.04      0.06       884\n",
      "\n",
      "           micro avg       0.86      0.86      0.86      7634\n",
      "           macro avg       0.50      0.50      0.49      7634\n",
      "        weighted avg       0.80      0.86      0.82      7634\n",
      "\n",
      "Other-ContextualInformation\n",
      "                             precision    recall  f1-score   support\n",
      "\n",
      "              Other Classes       0.97      0.96      0.96      7364\n",
      "Other-ContextualInformation       0.07      0.07      0.07       270\n",
      "\n",
      "                  micro avg       0.93      0.93      0.93      7634\n",
      "                  macro avg       0.52      0.52      0.52      7634\n",
      "               weighted avg       0.93      0.93      0.93      7634\n",
      "\n",
      "Other-Advice\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "Other Classes       0.94      0.97      0.95      7183\n",
      " Other-Advice       0.08      0.04      0.06       451\n",
      "\n",
      "    micro avg       0.91      0.91      0.91      7634\n",
      "    macro avg       0.51      0.51      0.50      7634\n",
      " weighted avg       0.89      0.91      0.90      7634\n",
      "\n",
      "Other-Sentiment\n",
      "                 precision    recall  f1-score   support\n",
      "\n",
      "  Other Classes       0.76      0.96      0.85      5844\n",
      "Other-Sentiment       0.21      0.03      0.06      1790\n",
      "\n",
      "      micro avg       0.74      0.74      0.74      7634\n",
      "      macro avg       0.49      0.50      0.45      7634\n",
      "   weighted avg       0.63      0.74      0.67      7634\n",
      "\n",
      "Other-Discussion\n",
      "                  precision    recall  f1-score   support\n",
      "\n",
      "   Other Classes       0.93      0.96      0.94      7064\n",
      "Other-Discussion       0.09      0.04      0.06       570\n",
      "\n",
      "       micro avg       0.89      0.89      0.89      7634\n",
      "       macro avg       0.51      0.50      0.50      7634\n",
      "    weighted avg       0.86      0.89      0.88      7634\n",
      "\n",
      "Other-Irrelevant\n",
      "                  precision    recall  f1-score   support\n",
      "\n",
      "   Other Classes       0.66      0.64      0.65      5013\n",
      "Other-Irrelevant       0.36      0.39      0.37      2621\n",
      "\n",
      "       micro avg       0.55      0.55      0.55      7634\n",
      "       macro avg       0.51      0.51      0.51      7634\n",
      "    weighted avg       0.56      0.55      0.55      7634\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Type Categorization\n",
    "# Per Information Type Performance\n",
    "# --------------------------------------------------\n",
    "# Per Category Classification Performance with confusion matrices\n",
    "# Performance on the target class is what we care about here, \n",
    "# primaraly with respect to recall, as we want the user to \n",
    "# see all of the information for a given category. A small\n",
    "# amount of noise being added to the feed is an acceptable\n",
    "# cost for good recall.\n",
    "#\n",
    "# Does not average across events (larger events have more impact)\n",
    "\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "perTopicFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "perTopicFile.write(\"EVALUATON: Information Type Categorization (Multi-type)\"+\"\\n\")\n",
    "perTopicFile.write(\"Per Information Type Performance\"+\"\\n\")\n",
    "perTopicFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    target_names = ['Other Classes', categoryId]\n",
    "    print(categoryId)\n",
    "    print(classification_report(category2GroundTruth[categoryId], category2Predicted[categoryId], target_names=target_names))\n",
    "\n",
    "\n",
    "    perTopicFile.write(categoryId+\"\\n\")\n",
    "    perTopicFile.write(classification_report(category2GroundTruth[categoryId], category2Predicted[categoryId], target_names=target_names)+\"\\n\")\n",
    "    perTopicFile.write(\"\"+\"\\n\")\n",
    "\n",
    "perTopicFile.write(\"\"+\"\\n\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Type Categorization\n",
    "# Per Information Type F1 Graph\n",
    "# --------------------------------------------------\n",
    "# Per Category Classification Performance\n",
    "# F1 scores for each information type, graphed\n",
    "# Does not average across events (larger events have more impact)\n",
    "\n",
    "\n",
    "\n",
    "N = len(informationTypes2Index)\n",
    "ind = np.arange(N)\n",
    "\n",
    "scoresPerCategoryF1 = []\n",
    "categoryLabels = []\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    scoresPerCategoryF1.append(f1_score(category2GroundTruth[categoryId], category2Predicted[categoryId], average='binary'))\n",
    "    categoryLabels.append(categoryId)\n",
    "    \n",
    "width = 0.90       # the width of the bars: can also be len(x) sequence\n",
    "\n",
    "p1 = plt.bar(ind, scoresPerCategoryF1, width)\n",
    "\n",
    "plt.ylabel('F1 Scores')\n",
    "plt.title('F1 Scores by Information Type')\n",
    "plt.xticks(ind, categoryLabels, rotation='vertical')\n",
    "plt.yticks(np.arange(0, 1, 0.1))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "floodChoco2019\n",
      "  Information Type Precision (positive class, multi-type, macro): 0.056963869463869464\n",
      "  Information Type Recall (positive class, multi-type, macro): 0.030646338724168914\n",
      "  Information Type F1 (positive class, multi-type, macro): 0.03876543209876543\n",
      "  Information Type Accuracy (overall, multi-type, macro): 0.9347686375321335\n",
      "  High Importance Information Type Precision (positive class, multi-type, macro): 0.0\n",
      "  High Importance Information Type Recall (positive class, multi-type, macro): 0.0\n",
      "  High Importance Information Type F1 (positive class, multi-type, macro): 0.0\n",
      "  High Importance Information Type Accuracy (overall, multi-type, macro): 0.9597257926306769\n",
      "  Low Importance Information Type Precision (positive class, multi-type, macro): 0.07595182595182595\n",
      "  Low Importance Information Type Recall (positive class, multi-type, macro): 0.040861784965558555\n",
      "  Low Importance Information Type F1 (positive class, multi-type, macro): 0.051687242798353905\n",
      "  Low Importance Information Type Accuracy (overall, multi-type, macro): 0.9264495858326194\n",
      "\n",
      "earthquakeCalifornia2014\n",
      "  Information Type Precision (positive class, multi-type, macro): 0.07001133786848072\n",
      "  Information Type Recall (positive class, multi-type, macro): 0.029033149404340045\n",
      "  Information Type F1 (positive class, multi-type, macro): 0.025385369135369134\n",
      "  Information Type Accuracy (overall, multi-type, macro): 0.8710629921259841\n",
      "  High Importance Information Type Precision (positive class, multi-type, macro): 0.0\n",
      "  High Importance Information Type Recall (positive class, multi-type, macro): 0.0\n",
      "  High Importance Information Type F1 (positive class, multi-type, macro): 0.0\n",
      "  High Importance Information Type Accuracy (overall, multi-type, macro): 0.9501312335958007\n",
      "  Low Importance Information Type Precision (positive class, multi-type, macro): 0.09334845049130763\n",
      "  Low Importance Information Type Recall (positive class, multi-type, macro): 0.0387108658724534\n",
      "  Low Importance Information Type F1 (positive class, multi-type, macro): 0.033847158847158845\n",
      "  Low Importance Information Type Accuracy (overall, multi-type, macro): 0.8447069116360457\n",
      "\n",
      "earthquakeBohol2013\n",
      "  Information Type Precision (positive class, multi-type, macro): 0.0960832773100826\n",
      "  Information Type Recall (positive class, multi-type, macro): 0.05198731223217945\n",
      "  Information Type F1 (positive class, multi-type, macro): 0.03901298135742224\n",
      "  Information Type Accuracy (overall, multi-type, macro): 0.8626817447495964\n",
      "  High Importance Information Type Precision (positive class, multi-type, macro): 0.012345679012345678\n",
      "  High Importance Information Type Recall (positive class, multi-type, macro): 0.05555555555555555\n",
      "  High Importance Information Type F1 (positive class, multi-type, macro): 0.020202020202020204\n",
      "  High Importance Information Type Accuracy (overall, multi-type, macro): 0.9617662897145934\n",
      "  Low Importance Information Type Precision (positive class, multi-type, macro): 0.12399581007599488\n",
      "  Low Importance Information Type Recall (positive class, multi-type, macro): 0.05079789779105408\n",
      "  Low Importance Information Type F1 (positive class, multi-type, macro): 0.04528330174255626\n",
      "  Low Importance Information Type Accuracy (overall, multi-type, macro): 0.829653563094597\n",
      "\n",
      "hurricaneFlorence2018\n",
      "  Information Type Precision (positive class, multi-type, macro): 0.09549124993948775\n",
      "  Information Type Recall (positive class, multi-type, macro): 0.054918676901928976\n",
      "  Information Type F1 (positive class, multi-type, macro): 0.057925493105788685\n",
      "  Information Type Accuracy (overall, multi-type, macro): 0.8793850873682804\n",
      "  High Importance Information Type Precision (positive class, multi-type, macro): 0.03216796152423234\n",
      "  High Importance Information Type Recall (positive class, multi-type, macro): 0.03343489779689579\n",
      "  High Importance Information Type F1 (positive class, multi-type, macro): 0.02646432766707821\n",
      "  High Importance Information Type Accuracy (overall, multi-type, macro): 0.9439775910364147\n",
      "  Low Importance Information Type Precision (positive class, multi-type, macro): 0.1165990127445729\n",
      "  Low Importance Information Type Recall (positive class, multi-type, macro): 0.0620799366036067\n",
      "  Low Importance Information Type F1 (positive class, multi-type, macro): 0.06841254825202553\n",
      "  Low Importance Information Type Accuracy (overall, multi-type, macro): 0.857854252812236\n",
      "\n",
      "shootingDallas2017\n",
      "  Information Type Precision (positive class, multi-type, macro): 0.07201750483331433\n",
      "  Information Type Recall (positive class, multi-type, macro): 0.07251354464532546\n",
      "  Information Type F1 (positive class, multi-type, macro): 0.038187117524480924\n",
      "  Information Type Accuracy (overall, multi-type, macro): 0.8986041666666669\n",
      "  High Importance Information Type Precision (positive class, multi-type, macro): 0.0021929824561403508\n",
      "  High Importance Information Type Recall (positive class, multi-type, macro): 0.16666666666666666\n",
      "  High Importance Information Type F1 (positive class, multi-type, macro): 0.004329004329004329\n",
      "  High Importance Information Type Accuracy (overall, multi-type, macro): 0.9614166666666667\n",
      "  Low Importance Information Type Precision (positive class, multi-type, macro): 0.09529234562570565\n",
      "  Low Importance Information Type Recall (positive class, multi-type, macro): 0.041129170638211726\n",
      "  Low Importance Information Type F1 (positive class, multi-type, macro): 0.04947315525630645\n",
      "  Low Importance Information Type Accuracy (overall, multi-type, macro): 0.8776666666666666\n",
      "\n",
      "fireYMM2016\n",
      "  Information Type Precision (positive class, multi-type, macro): 0.11903724890348599\n",
      "  Information Type Recall (positive class, multi-type, macro): 0.045384602731510175\n",
      "  Information Type F1 (positive class, multi-type, macro): 0.03616483480781318\n",
      "  Information Type Accuracy (overall, multi-type, macro): 0.8313958333333334\n",
      "  High Importance Information Type Precision (positive class, multi-type, macro): 0.0327344676707912\n",
      "  High Importance Information Type Recall (positive class, multi-type, macro): 0.025056150434042284\n",
      "  High Importance Information Type F1 (positive class, multi-type, macro): 0.026652228397079657\n",
      "  High Importance Information Type Accuracy (overall, multi-type, macro): 0.9248333333333333\n",
      "  Low Importance Information Type Precision (positive class, multi-type, macro): 0.14780484264771757\n",
      "  Low Importance Information Type Recall (positive class, multi-type, macro): 0.05216075349733281\n",
      "  Low Importance Information Type F1 (positive class, multi-type, macro): 0.03933570361139101\n",
      "  Low Importance Information Type Accuracy (overall, multi-type, macro): 0.8002499999999999\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Type Categorization\n",
    "# Per Event Performance\n",
    "# --------------------------------------------------\n",
    "# Categorization performance for each event\n",
    "# Precision, recall and F1 only consider the positive class\n",
    "# Accuracy is an overall metric\n",
    "# We report performance for all categories, high importance categories and low importance categories\n",
    "# Macro average (categories have equal weight)\n",
    "\n",
    "perEventFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "perEventFile.write(\"EVALUATON: Information Type Categorization (Multi-type)\"+\"\\n\")\n",
    "perEventFile.write(\"Per Event Performance\"+\"\\n\")\n",
    "perEventFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "\n",
    "for eventId in eventIdentifiers:\n",
    "    avgPrecision = 0.0\n",
    "    avgRecall = 0.0\n",
    "    avgF1 = 0.0\n",
    "    avgAccuracy = 0.0\n",
    "    \n",
    "    avgPrecisionHigh = 0.0\n",
    "    avgRecallHigh = 0.0\n",
    "    avgF1High = 0.0\n",
    "    avgAccuracyHigh = 0.0\n",
    "\n",
    "    avgPrecisionLow = 0.0\n",
    "    avgRecallLow = 0.0\n",
    "    avgF1Low = 0.0\n",
    "    avgAccuracyLow = 0.0\n",
    "\n",
    "    for categoryId in informationTypes2Index.keys():\n",
    "        \n",
    "        categoryPrecision = precision_score(event2groundtruth[eventId].get(categoryId), event2prediction[eventId].get(categoryId), average='binary')\n",
    "        categoryRecall = recall_score(event2groundtruth[eventId].get(categoryId), event2prediction[eventId].get(categoryId), average='binary')\n",
    "        categoryF1 = f1_score(event2groundtruth[eventId].get(categoryId), event2prediction[eventId].get(categoryId), average='binary')\n",
    "        categoryAccuracy = accuracy_score(event2groundtruth[eventId].get(categoryId), event2prediction[eventId].get(categoryId))\n",
    "        \n",
    "        avgPrecision = avgPrecision + categoryPrecision\n",
    "        avgRecall = avgRecall + categoryRecall\n",
    "        avgF1 = avgF1 + categoryF1\n",
    "        avgAccuracy = avgAccuracy + categoryAccuracy\n",
    "        \n",
    "        if any(categoryId in s for s in highImportCategories):\n",
    "            avgPrecisionHigh = avgPrecisionHigh + categoryPrecision\n",
    "            avgRecallHigh = avgRecallHigh + categoryRecall\n",
    "            avgF1High = avgF1High + categoryF1\n",
    "            avgAccuracyHigh = avgAccuracyHigh + categoryAccuracy\n",
    "        else:\n",
    "            avgPrecisionLow = avgPrecisionLow + categoryPrecision\n",
    "            avgRecallLow = avgRecallLow + categoryRecall\n",
    "            avgF1Low = avgF1Low + categoryF1\n",
    "            avgAccuracyLow = avgAccuracyLow + categoryAccuracy\n",
    "        \n",
    "    print(eventId)\n",
    "    print(\"  Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecision/len(informationTypes2Index)))\n",
    "    print(\"  Information Type Recall (positive class, multi-type, macro): \"+str(avgRecall/len(informationTypes2Index)))\n",
    "    print(\"  Information Type F1 (positive class, multi-type, macro): \"+str(avgF1/len(informationTypes2Index)))\n",
    "    print(\"  Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracy/len(informationTypes2Index)))\n",
    "    print(\"  High Importance Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecisionHigh/numHighInformationTypes))\n",
    "    print(\"  High Importance Information Type Recall (positive class, multi-type, macro): \"+str(avgRecallHigh/numHighInformationTypes))\n",
    "    print(\"  High Importance Information Type F1 (positive class, multi-type, macro): \"+str(avgF1High/numHighInformationTypes))\n",
    "    print(\"  High Importance Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracyHigh/numHighInformationTypes))\n",
    "    print(\"  Low Importance Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecisionLow/numLowInformationTypes))\n",
    "    print(\"  Low Importance Information Type Recall (positive class, multi-type, macro): \"+str(avgRecallLow/numLowInformationTypes))\n",
    "    print(\"  Low Importance Information Type F1 (positive class, multi-type, macro): \"+str(avgF1Low/numLowInformationTypes))\n",
    "    print(\"  Low Importance Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracyLow/numLowInformationTypes))\n",
    "    print(\"\")\n",
    "    \n",
    "    perEventFile.write(eventId+\"\\n\")\n",
    "    perEventFile.write(\"  Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecision/len(informationTypes2Index))+\"\\n\")\n",
    "    perEventFile.write(\"  Information Type Recall (positive class, multi-type, macro): \"+str(avgRecall/len(informationTypes2Index))+\"\\n\")\n",
    "    perEventFile.write(\"  Information Type F1 (positive class, multi-type, macro): \"+str(avgF1/len(informationTypes2Index))+\"\\n\")\n",
    "    perEventFile.write(\"  Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracy/len(informationTypes2Index))+\"\\n\")\n",
    "    perEventFile.write(\"  High Importance Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecisionHigh/numHighInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  High Importance Information Type Recall (positive class, multi-type, macro): \"+str(avgRecallHigh/numHighInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  High Importance Information Type F1 (positive class, multi-type, macro): \"+str(avgF1High/numHighInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  High Importance Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracyHigh/numHighInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  Low Importance Information Type Precision (positive class, multi-type, macro): \"+str(avgPrecisionLow/numLowInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  Low Importance Information Type Recall (positive class, multi-type, macro): \"+str(avgRecallLow/numLowInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  Low Importance Information Type F1 (positive class, multi-type, macro): \"+str(avgF1Low/numLowInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"  Low Importance Information Type Accuracy (overall, multi-type, macro): \"+str(avgAccuracyLow/numLowInformationTypes)+\"\\n\")\n",
    "    perEventFile.write(\"\\n\")\n",
    "    \n",
    "perEventFile.write(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Type Categorization\n",
    "# Per Event F1 Graph\n",
    "# --------------------------------------------------\n",
    "# Multi-type (1 vs All): Tweets have multiple information types, aim: predict all of them\n",
    "# Macro average (categories have equal weight)\n",
    "\n",
    "N = len(eventIdentifiers)\n",
    "ind = np.arange(N)\n",
    "\n",
    "scoresPerEventF1 = []\n",
    "for eventId in eventIdentifiers:\n",
    "    avgF1 = 0.0\n",
    "\n",
    "    for categoryId in informationTypes2Index.keys():\n",
    "        avgF1 = avgF1 + f1_score(event2groundtruth[eventId].get(categoryId), event2prediction[eventId].get(categoryId), average='binary')\n",
    "        \n",
    "    scoresPerEventF1.append(avgF1/len(informationTypes2Index))\n",
    "    \n",
    "width = 0.90       # the width of the bars: can also be len(x) sequence\n",
    "\n",
    "p1 = plt.bar(ind, scoresPerEventF1, width)\n",
    "\n",
    "plt.ylabel('F1 Scores')\n",
    "plt.title('F1 Category Scores by Event')\n",
    "plt.xticks(ind, eventIdentifiers, rotation='vertical')\n",
    "plt.yticks(np.arange(0, 1, 0.1))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Priority Estimation Error (mean squared error, macro): 0.09666849601382375\n",
      "Priority Estimation Error High Importance (mean squared error, macro): 0.16287543807551247\n",
      "Priority Estimation Error Low Importance (mean squared error, macro): 0.07459951532659419\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Priority Level\n",
    "# Overall Performance\n",
    "# --------------------------------------------------\n",
    "# How divergent is the system from the human priority labels?\n",
    "# Converts the human labels into numerical values, see priorityMapping\n",
    "# Average error over information types, lower is better\n",
    "# Macro average (categories have equal weight)\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "avgMSE = 0.0;\n",
    "avgMSEHigh = 0.0;\n",
    "avgMSELow = 0.0;\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    groundTruthPriorities = category2GroundTruthPriority[categoryId]\n",
    "    predictedPriorities = category2PredictedPriority[categoryId]\n",
    "    \n",
    "    error = mean_squared_error(groundTruthPriorities, predictedPriorities)\n",
    "    avgMSE = avgMSE + error;\n",
    "    \n",
    "    if any(categoryId in s for s in highImportCategories):\n",
    "        avgMSEHigh = avgMSEHigh + error\n",
    "    else:\n",
    "        avgMSELow = avgMSELow + error\n",
    "    \n",
    "    \n",
    "    \n",
    "print(\"Priority Estimation Error (mean squared error, macro): \"+str(avgMSE/len(informationTypes2Index)))\n",
    "print(\"Priority Estimation Error High Importance (mean squared error, macro): \"+str(avgMSEHigh/numHighInformationTypes))\n",
    "print(\"Priority Estimation Error Low Importance (mean squared error, macro): \"+str(avgMSELow/numLowInformationTypes))\n",
    "    \n",
    "resultsFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "resultsFile.write(\"EVALUATON: Information Priority Level\"+\"\\n\")\n",
    "resultsFile.write(\"Overall Performance\"+\"\\n\")\n",
    "resultsFile.write(\"--------------------------------------------------\"+\"\\n\")\n",
    "resultsFile.write(\"> Priority Estimation Error (mean squared error, macro): \"+str(avgMSE/len(informationTypes2Index))+\"\\n\")\n",
    "resultsFile.write(\"> Priority Estimation Error High Importance (mean squared error, macro): \"+str(avgMSEHigh/numHighInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"> Priority Estimation Error Low Importance (mean squared error, macro): \"+str(avgMSELow/numLowInformationTypes)+\"\\n\")\n",
    "resultsFile.write(\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# --------------------------------------------------\n",
    "# TREC-IS 2019-A\n",
    "# Information Priority Level\n",
    "# Per Information Type Performance\n",
    "# --------------------------------------------------\n",
    "# Error per information type, lower is better\n",
    "\n",
    "N = len(informationTypes2Index)\n",
    "ind = np.arange(N)\n",
    "\n",
    "mseValues = []\n",
    "categoryLabels = []\n",
    "for categoryId in informationTypes2Index.keys():\n",
    "    groundTruthPriorities = category2GroundTruthPriority[categoryId]\n",
    "    predictedPriorities = category2PredictedPriority[categoryId]\n",
    "    error = mean_squared_error(groundTruthPriorities, predictedPriorities)\n",
    "    categoryLabels.append(categoryId)\n",
    "    mseValues.append(error);\n",
    "    \n",
    "width = 0.90       # the width of the bars: can also be len(x) sequence\n",
    "\n",
    "p1 = plt.bar(ind, mseValues, width)\n",
    "\n",
    "plt.ylabel('MSE Scores (lower is better)')\n",
    "plt.title('Mean Squared Error on Predicted Priority Levels Per Type')\n",
    "plt.xticks(ind, categoryLabels, rotation='vertical')\n",
    "plt.yticks(np.arange(0, 1, 0.1))\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Done\n",
    "resultsFile.close() \n",
    "perTopicFile.close()\n",
    "perEventFile.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
